const Product = require("../models/Product");

// üìå L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi b·ªô l·ªçc v√† ph√¢n trang
exports.getAllProducts = async (req, res) => {
    try {
        let { page = 1, limit = 10, category, minPrice, maxPrice } = req.query;
        page = parseInt(page);
        limit = parseInt(limit);

        // X√¢y d·ª±ng b·ªô l·ªçc s·∫£n ph·∫©m
        let filter = {};
        if (category) filter.category = category;
        if (minPrice) filter.price = { ...filter.price, $gte: parseFloat(minPrice) };
        if (maxPrice) filter.price = { ...filter.price, $lte: parseFloat(maxPrice) };

        // L·∫•y danh s√°ch s·∫£n ph·∫©m theo ph√¢n trang v√† b·ªô l·ªçc
        const products = await Product.find(filter)
            .skip((page - 1) * limit)
            .limit(limit);

        const totalProducts = await Product.countDocuments(filter);

        res.json({
            total: totalProducts,
            page,
            totalPages: Math.ceil(totalProducts / limit),
            products,
        });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå Th√™m s·∫£n ph·∫©m m·ªõi
exports.createProduct = async (req, res) => {
    try {
        const { name, price, description, category, stock, image } = req.body;

        // ‚úÖ Ki·ªÉm tra thi·∫øu th√¥ng tin
        if (!name || !price || !description || !category || !stock || !image) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m" });
        }

        // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
        if (typeof price !== "number" || price <= 0) {
            return res.status(400).json({ message: "Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng" });
        }
        if (typeof stock !== "number" || stock < 0) {
            return res.status(400).json({ message: "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
        }

        // ‚úÖ T·∫°o s·∫£n ph·∫©m m·ªõi
        const newProduct = new Product({ name, price, description, category, stock, image });
        await newProduct.save();

        res.status(201).json({ message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng", product: newProduct });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå X√≥a s·∫£n ph·∫©m theo ID
exports.deleteProduct = async (req, res) => {
    try {
        const { id } = req.params;

        // ‚úÖ Ki·ªÉm tra ID h·ª£p l·ªá
        if (!id.match(/^[0-9a-fA-F]{24}$/)) {
            return res.status(400).json({ message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
        }

        const deletedProduct = await Product.findByIdAndDelete(id);
        if (!deletedProduct) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        }

        res.json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};
