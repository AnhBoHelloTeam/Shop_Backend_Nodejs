const mongoose = require("mongoose");
const Discount = require("../models/discount");

// T·∫°o m√£ gi·∫£m gi√° (Admin)
exports.createDiscount = async (req, res) => {
  try {
    const { code, percentage, minOrderValue, startDate, endDate, isActive } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!code || !percentage || !minOrderValue || !startDate || !endDate) {
      return res.status(400).json({ message: "Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: code, percentage, minOrderValue, startDate, endDate" });
    }
    if (percentage < 0 || percentage > 100) {
      return res.status(400).json({ message: "Ph·∫ßn trƒÉm gi·∫£m gi√° ph·∫£i t·ª´ 0 ƒë·∫øn 100" });
    }
    if (minOrderValue < 0) {
      return res.status(400).json({ message: "Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu kh√¥ng ƒë∆∞·ª£c √¢m" });
    }
    if (new Date(startDate) >= new Date(endDate)) {
      return res.status(400).json({ message: "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c" });
    }

    // Ki·ªÉm tra m√£ ƒë√£ t·ªìn t·∫°i
    const existingDiscount = await Discount.findOne({ code: code.toUpperCase() });
    if (existingDiscount) {
      return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i" });
    }

    const discount = new Discount({
      code: code.toUpperCase(),
      percentage,
      minOrderValue,
      startDate,
      endDate,
      isActive: isActive !== undefined ? isActive : true,
    });

    await discount.save();
    res.status(201).json({ message: "T·∫°o m√£ gi·∫£m gi√° th√†nh c√¥ng", discount });
  } catch (error) {
    console.error("üî• L·ªói khi t·∫°o m√£ gi·∫£m gi√°:", error);
    res.status(500).json({ message: "L·ªói server khi t·∫°o m√£ gi·∫£m gi√°", error: error.message });
  }
};

// L·∫•y danh s√°ch m√£ gi·∫£m gi√° (Admin)
exports.getDiscounts = async (req, res) => {
  try {
    const now = new Date();
    const discounts = await Discount.find()
      .sort({ createdAt: -1 })
      .select("-__v");
    res.status(200).json(discounts);
  } catch (error) {
    console.error("üî• L·ªói khi l·∫•y danh s√°ch m√£ gi·∫£m gi√°:", error);
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch m√£ gi·∫£m gi√°", error: error.message });
  }
};

// C·∫≠p nh·∫≠t m√£ gi·∫£m gi√° (Admin)
exports.updateDiscount = async (req, res) => {
  try {
    const { id } = req.params;
    const { code, percentage, minOrderValue, startDate, endDate, isActive } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" });
    }

    // Ki·ªÉm tra d·ªØ li·ªáu c·∫≠p nh·∫≠t
    if (percentage && (percentage < 0 || percentage > 100)) {
      return res.status(400).json({ message: "Ph·∫ßn trƒÉm gi·∫£m gi√° ph·∫£i t·ª´ 0 ƒë·∫øn 100" });
    }
    if (minOrderValue && minOrderValue < 0) {
      return res.status(400).json({ message: "Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu kh√¥ng ƒë∆∞·ª£c √¢m" });
    }
    if (startDate && endDate && new Date(startDate) >= new Date(endDate)) {
      return res.status(400).json({ message: "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c" });
    }
    if (code) {
      const existingDiscount = await Discount.findOne({ code: code.toUpperCase(), _id: { $ne: id } });
      if (existingDiscount) {
        return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i" });
      }
    }

    const updateData = {
      ...(code && { code: code.toUpperCase() }),
      ...(percentage && { percentage }),
      ...(minOrderValue && { minOrderValue }),
      ...(startDate && { startDate }),
      ...(endDate && { endDate }),
      ...(isActive !== undefined && { isActive }),
    };

    const discount = await Discount.findByIdAndUpdate(id, updateData, { new: true });
    if (!discount) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°" });
    }

    res.status(200).json({ message: "C·∫≠p nh·∫≠t m√£ gi·∫£m gi√° th√†nh c√¥ng", discount });
  } catch (error) {
    console.error("üî• L·ªói khi c·∫≠p nh·∫≠t m√£ gi·∫£m gi√°:", error);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t m√£ gi·∫£m gi√°", error: error.message });
  }
};

// X√≥a m√£ gi·∫£m gi√° (Admin)
exports.deleteDiscount = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" });
    }

    const discount = await Discount.findByIdAndDelete(id);
    if (!discount) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°" });
    }

    res.status(200).json({ message: "X√≥a m√£ gi·∫£m gi√° th√†nh c√¥ng" });
  } catch (error) {
    console.error("üî• L·ªói khi x√≥a m√£ gi·∫£m gi√°:", error);
    res.status(500).json({ message: "L·ªói server khi x√≥a m√£ gi·∫£m gi√°", error: error.message });
  }
};

// L·∫•y m√£ gi·∫£m gi√° kh·∫£ d·ª•ng (Ng∆∞·ªùi d√πng)
exports.getAvailableDiscounts = async (req, res) => {
  try {
    const { cartItems, totalPrice, currentDate } = req.body;

    if (!cartItems || !totalPrice || !currentDate) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin gi·ªè h√†ng ho·∫∑c ng√†y hi·ªán t·∫°i" });
    }

    const now = new Date(currentDate);
    const discounts = await Discount.find({
      startDate: { $lte: now },
      endDate: { $gte: now },
      minOrderValue: { $lte: totalPrice },
      isActive: true,
    }).select("-__v");

    res.status(200).json(discounts);
  } catch (error) {
    console.error("üî• L·ªói khi l·∫•y m√£ gi·∫£m gi√°:", error);
    res.status(500).json({ message: "L·ªói server khi l·∫•y m√£ gi·∫£m gi√°", error: error.message });
  }
};

// √Åp d·ª•ng m√£ gi·∫£m gi√° (Ng∆∞·ªùi d√πng)
exports.applyDiscount = async (req, res) => {
  try {
    const { code, cartItems, totalPrice } = req.body;

    if (!code || !cartItems || !totalPrice) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin m√£ gi·∫£m gi√° ho·∫∑c gi·ªè h√†ng" });
    }

    const now = new Date();
    const discount = await Discount.findOne({
      code: code.toUpperCase(),
      startDate: { $lte: now },
      endDate: { $gte: now },
      minOrderValue: { $lte: totalPrice },
      isActive: true,
    });

    if (!discount) {
      return res.status(400).json({ message: "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng √°p d·ª•ng ƒë∆∞·ª£c" });
    }

    const discountAmount = (discount.percentage / 100) * totalPrice;
    const newTotalPrice = totalPrice - discountAmount;

    res.status(200).json({
      discountAmount,
      newTotalPrice,
    });
  } catch (error) {
    console.error("üî• L·ªói khi √°p d·ª•ng m√£ gi·∫£m gi√°:", error);
    res.status(500).json({ message: "L·ªói server khi √°p d·ª•ng m√£ gi·∫£m gi√°", error: error.message });
  }
};