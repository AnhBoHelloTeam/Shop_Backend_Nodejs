const mongoose = require("mongoose");
const Discount = require("../models/discount");

// T·∫°o m√£ gi·∫£m gi√°
exports.createDiscount = async (req, res) => {
    try {
        const { code, description, percentage, minOrderValue, maxDiscount, minDiscount, startDate, endDate } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!code || !percentage || !minOrderValue || !maxDiscount || !startDate || !endDate) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin m√£ gi·∫£m gi√°" });
        }
        if (percentage < 0 || percentage > 100) {
            return res.status(400).json({ message: "Ph·∫ßn trƒÉm gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" });
        }
        if (minOrderValue < 0 || maxDiscount < 0 || minDiscount < 0) {
            return res.status(400).json({ message: "Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c √¢m" });
        }
        if (new Date(startDate) >= new Date(endDate)) {
            return res.status(400).json({ message: "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c" });
        }

        // Ki·ªÉm tra m√£ ƒë√£ t·ªìn t·∫°i
        const existingDiscount = await Discount.findOne({ code });
        if (existingDiscount) {
            return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i" });
        }

        const discount = new Discount({
            code: code.toUpperCase(),
            description,
            percentage,
            minOrderValue,
            maxDiscount,
            minDiscount,
            startDate,
            endDate
        });

        await discount.save();
        res.status(201).json({ message: "T·∫°o m√£ gi·∫£m gi√° th√†nh c√¥ng", discount });
    } catch (error) {
        console.error("üî• L·ªói khi t·∫°o m√£ gi·∫£m gi√°:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// L·∫•y danh s√°ch m√£ gi·∫£m gi√°
exports.getDiscounts = async (req, res) => {
    try {
        const discounts = await Discount.find().sort({ createdAt: -1 });
        res.json(discounts);
    } catch (error) {
        console.error("üî• L·ªói khi l·∫•y m√£ gi·∫£m gi√°:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// C·∫≠p nh·∫≠t m√£ gi·∫£m gi√°
exports.updateDiscount = async (req, res) => {
    try {
        const { id } = req.params;
        const updateData = req.body;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ message: "ID m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" });
        }

        if (updateData.percentage && (updateData.percentage < 0 || updateData.percentage > 100)) {
            return res.status(400).json({ message: "Ph·∫ßn trƒÉm gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" });
        }
        if (updateData.minOrderValue && updateData.minOrderValue < 0) {
            return res.status(400).json({ message: "Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu kh√¥ng h·ª£p l·ªá" });
        }
        if (updateData.maxDiscount && updateData.maxDiscount < 0) {
            return res.status(400).json({ message: "Gi√° tr·ªã gi·∫£m t·ªëi ƒëa kh√¥ng h·ª£p l·ªá" });
        }
        if (updateData.startDate && updateData.endDate && new Date(updateData.startDate) >= new Date(updateData.endDate)) {
            return res.status(400).json({ message: "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c" });
        }

        const discount = await Discount.findByIdAndUpdate(id, updateData, { new: true });
        if (!discount) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°" });
        }

        res.json({ message: "C·∫≠p nh·∫≠t m√£ gi·∫£m gi√° th√†nh c√¥ng", discount });
    } catch (error) {
        console.error("üî• L·ªói khi c·∫≠p nh·∫≠t m√£ gi·∫£m gi√°:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// X√≥a m√£ gi·∫£m gi√°
exports.deleteDiscount = async (req, res) => {
    try {
        const { id } = req.params;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ message: "ID m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" });
        }

        const discount = await Discount.findByIdAndDelete(id);
        if (!discount) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°" });
        }

        res.json({ message: "X√≥a m√£ gi·∫£m gi√° th√†nh c√¥ng" });
    } catch (error) {
        console.error("üî• L·ªói khi x√≥a m√£ gi·∫£m gi√°:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};