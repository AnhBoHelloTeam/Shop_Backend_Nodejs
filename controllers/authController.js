    const User = require("../models/User");
    const bcrypt = require("bcryptjs");
    const jwt = require("jsonwebtoken");
    const validator = require("validator");

    exports.register = async (req, res) => {
        try {
            let { name, email, password, phone, address, avatar } = req.body;

            // ‚úÖ X·ª≠ l√Ω kho·∫£ng tr·∫Øng v√† chu·∫©n h√≥a d·ªØ li·ªáu
            name = name?.trim();
            email = email?.trim().toLowerCase();
            password = password?.trim();

            // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            if (!name || !email || !password) {
                return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
            }

            if (/\s/.test(email)) {
                return res.status(400).json({ message: "Email kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng" });
            }

            if (!validator.isEmail(email)) {
                return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá" });
            }

            if (/\s/.test(password)) {
                return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng" });
            }

            if (password.length < 6) {
                return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
            }

            // ‚úÖ Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
            let user = await User.findOne({ email });
            if (user) {
                return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
            }

            // ‚úÖ Hash m·∫≠t kh·∫©u v√† l∆∞u v√†o database
            const hashedPassword = await bcrypt.hash(password, 10);
            user = new User({
                name,
                email,
                password: hashedPassword,
                phone,
                address,
                avatar
            });

            await user.save();

            res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });

        } catch (error) {
            console.error("üî• L·ªói khi ƒëƒÉng k√Ω:", error);
            res.status(500).json({ message: "L·ªói server" });
        }
    };



    exports.login = async (req, res) => {
        try {
            let { email, password } = req.body;

            // ‚úÖ Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi n·∫øu c√≥
            email = email?.trim();
            password = password?.trim();

            // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            if (!email || !password) {
                return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u" });
            }

            if (/\s/.test(email)) {
                return res.status(400).json({ message: "Email kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng" });
            }

            if (/\s/.test(password)) {
                return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng" });
            }

            if (!validator.isEmail(email)) {
                return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá" });
            }

            if (password.length < 6) {
                return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
            }

            // ‚úÖ Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
            const user = await User.findOne({ email });
            if (!user) {
                return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
            }

            // ‚úÖ Ki·ªÉm tra m·∫≠t kh·∫©u
            const isMatch = await bcrypt.compare(password, user.password);
            if (!isMatch) {
                return res.status(400).json({ message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
            }

            // ‚úÖ T·∫°o token
            const token = jwt.sign(
                { userId: user._id, role: user.role },
                process.env.JWT_SECRET,
                { expiresIn: "1h" }
            );

            // ‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng
            res.json({
                message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
                token,
                user: {
                    id: user._id,
                    name: user.name,
                    email: user.email,
                    role: user.role,
                    avatar: user.avatar,
                },
            });

        } catch (error) {
            console.error("üî• L·ªói khi ƒëƒÉng nh·∫≠p:", error);
            res.status(500).json({ message: "L·ªói server" });
        }
    };

