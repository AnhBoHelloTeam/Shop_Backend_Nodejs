const express = require("express");
const mongoose = require("mongoose");
const Cart = require("../models/Cart");
const Product = require("../models/Product");
const { authMiddleware } = require("../middlewares/authMiddleware");

const router = express.Router();

// üìå Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
router.post("/add", authMiddleware, async (req, res) => {
    try {
        const { productId, quantity } = req.body;
        const userId = req.user.userId;

        if (!productId || !quantity) {
            return res.status(400).json({ message: "Thi·∫øu productId ho·∫∑c quantity" });
        }

        if (!mongoose.Types.ObjectId.isValid(productId)) {
            return res.status(400).json({ message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
        }

        if (!Number.isInteger(quantity) || quantity <= 0) {
            return res.status(400).json({ message: "S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng" });
        }

        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        }

        let cart = await Cart.findOne({ user: userId });
        if (!cart) {
            cart = new Cart({ user: userId, items: [] });
        }

        const existingItem = cart.items.find(item => item.product.toString() === productId);
        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.items.push({ product: productId, quantity });
        }

        await cart.save();
        res.status(200).json(cart);
    } catch (error) {
        console.error("üî• L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});


// üìå Xem gi·ªè h√†ng c·ªßa user v·ªõi t·ªïng gi√° tr·ªã v√† s·ªë l∆∞·ª£ng
router.get("/", authMiddleware, async (req, res) => {
    try {
        if (!req.user || !req.user.userId) {
            return res.status(401).json({ message: "Unauthorized" });
        }

        const userId = req.user.userId;
        console.log("üõí ƒêang l·∫•y gi·ªè h√†ng cho user:", userId);

        const cart = await Cart.findOne({ user: userId }).populate("items.product");

        if (!cart) {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng trong DB");
            return res.status(200).json({ 
                message: "Gi·ªè h√†ng tr·ªëng", 
                items: [], 
                totalQuantity: 0, 
                totalPrice: 0 
            });
        }

        // T√≠nh t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng gi√°
        let totalQuantity = 0;
        let totalPrice = 0;

        const cartItems = cart.items.map(item => {
            const product = item.product;
            const quantity = item.quantity;
            const totalItemPrice = product.price * quantity;

            // C·ªông d·ªìn t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng gi√°
            totalQuantity += quantity;
            totalPrice += totalItemPrice;

            return {
                product: {
                    _id: product._id,
                    name: product.name,
                    image: product.image,
                    price: product.price
                },
                quantity,
                totalItemPrice
            };
        });

        // In ra console ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã t√≠nh to√°n
        console.log("T·ªïng s·ªë l∆∞·ª£ng:", totalQuantity);
        console.log("T·ªïng gi√° tr·ªã:", totalPrice);

        // Tr·∫£ v·ªÅ d·ªØ li·ªáu
        res.json({
            items: cartItems,
            totalQuantity,   // tr·∫£ v·ªÅ t·ªïng s·ªë l∆∞·ª£ng
            totalPrice       // tr·∫£ v·ªÅ t·ªïng gi√° tr·ªã
        });

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y gi·ªè h√†ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});



// üìå X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
router.delete("/remove/:productId", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const productId = req.params.productId;

        // Ki·ªÉm tra ID s·∫£n ph·∫©m h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(productId)) {
            return res.status(400).json({ message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
        }

        // T√¨m gi·ªè h√†ng c·ªßa user
        let cart = await Cart.findOne({ user: userId });

        if (!cart) {
            return res.status(404).json({ message: "Gi·ªè h√†ng tr·ªëng" });
        }

        // T√¨m s·∫£n ph·∫©m trong gi·ªè h√†ng
        const itemIndex = cart.items.findIndex(item => item.product.toString() === productId);
        if (itemIndex === -1) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng" });
        }

        // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
        cart.items.splice(itemIndex, 1);
        await cart.save();

        res.status(200).json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng", cart });
    } catch (error) {
        console.error("üî• L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});




// üìå Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (ho·∫∑c x√≥a n·∫øu s·ªë l∆∞·ª£ng = 0)
router.put("/decrease/:productId", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const productId = req.params.productId;

        if (!mongoose.Types.ObjectId.isValid(productId)) {
            return res.status(400).json({ message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
        }

        let cart = await Cart.findOne({ user: userId });
        if (!cart) {
            return res.status(404).json({ message: "Gi·ªè h√†ng tr·ªëng" });
        }

        const itemIndex = cart.items.findIndex(item => item.product.toString() === productId);
        if (itemIndex === -1) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng" });
        }

        if (cart.items[itemIndex].quantity > 1) {
            cart.items[itemIndex].quantity -= 1;
        } else {
            cart.items.splice(itemIndex, 1);
        }

        await cart.save();
        res.status(200).json({ message: "ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng", cart });
    } catch (error) {
        console.error("üî• L·ªói khi gi·∫£m s·ªë l∆∞·ª£ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});


// üìå TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
router.put("/increase/:productId", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const productId = req.params.productId;

        if (!mongoose.Types.ObjectId.isValid(productId)) {
            return res.status(400).json({ message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
        }

        let cart = await Cart.findOne({ user: userId });
        if (!cart) {
            return res.status(404).json({ message: "Gi·ªè h√†ng tr·ªëng" });
        }

        const itemIndex = cart.items.findIndex(item => item.product.toString() === productId);
        if (itemIndex === -1) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng" });
        }

        cart.items[itemIndex].quantity += 1;

        await cart.save();
        res.status(200).json({ message: "ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng", cart });
    } catch (error) {
        console.error("üî• L·ªói khi tƒÉng s·ªë l∆∞·ª£ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});



module.exports = router;
