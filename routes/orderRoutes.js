const express = require("express");
const mongoose = require("mongoose");
const Order = require("../models/Order");
const Cart = require("../models/Cart");
const { authMiddleware } = require("../middlewares/authMiddleware");

const router = express.Router();

// üìå ƒê·∫∑t h√†ng t·ª´ gi·ªè h√†ng
router.post("/checkout", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const userRole = req.user.role;  // L·∫•y role t·ª´ token ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
        
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin kh√¥ng
        if (userRole === "admin") {
            console.log("Admin kh√¥ng th·ªÉ mua h√†ng.");
            return res.status(403).json( "Admin kh√¥ng th·ªÉ mua h√†ng." );
        }
        
        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ message: "User ID kh√¥ng h·ª£p l·ªá." });
        }

        let cart = await Cart.findOne({ user: userId }).populate("items.product");
        if (!cart || cart.items.length === 0) {
            return res.status(400).json({ message: "Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ ƒë·∫∑t h√†ng." });
        }

        // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ gi√° h·ª£p l·ªá kh√¥ng
        let totalPrice = 0;
        for (const item of cart.items) {
            if (!item.product || typeof item.product.price !== "number") {
                return res.status(400).json({ message: "S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá trong gi·ªè h√†ng." });
            }
            totalPrice += item.product.price * item.quantity;
        }

        if (totalPrice <= 0) {
            return res.status(400).json({ message: "T·ªïng gi√° tr·ªã ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá." });
        }

        // T·∫°o ƒë∆°n h√†ng m·ªõi
        const newOrder = new Order({
            user: userId,
            items: cart.items,
            totalPrice
        });

        await newOrder.save();

        // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        await Cart.findOneAndDelete({ user: userId });

        res.status(201).json({ message: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", order: newOrder });
    } catch (error) {
        console.error("üî• L·ªói khi ƒë·∫∑t h√†ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});

// üìå Xem l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa user (Admin c√≥ th·ªÉ xem t·∫•t c·∫£, User ch·ªâ xem c·ªßa m√¨nh)
router.get("/history", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const userRole = req.user.role;  // L·∫•y role t·ª´ token ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c

        // Ki·ªÉm tra n·∫øu l√† admin, c√≥ th·ªÉ l·∫•y l·ªãch s·ª≠ c·ªßa t·∫•t c·∫£ ng∆∞·ªùi d√πng
        if (userRole === "admin") {
            const orders = await Order.find().sort({ createdAt: -1 });  // Admin l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng

            if (!orders.length) {
                return res.status(200).json({ message: "Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o." });
            }

            return res.status(200).json(orders);
        }

        // N·∫øu l√† user, ch·ªâ c√≥ th·ªÉ l·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa ch√≠nh m√¨nh
        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ message: "User ID kh√¥ng h·ª£p l·ªá." });
        }

        const orders = await Order.find({ user: userId }).sort({ createdAt: -1 });

        if (!orders.length) {
            return res.status(200).json({ message: "Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o." });
        }

        res.status(200).json(orders);
    } catch (error) {
        console.error("üî• L·ªói khi l·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});


module.exports = router;
