const express = require("express");
const mongoose = require("mongoose");
const Wallet = require("../models/Wallet");
const Notification = require("../models/Notification");
const { authMiddleware, adminMiddleware } = require("../middlewares/authMiddleware");
const multer = require("multer");
const path = require("path");

// C·∫•u h√¨nh multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/");
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const filetypes = /jpeg|jpg|png/;
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = filetypes.test(file.mimetype);
    if (extname && mimetype) {
      return cb(null, true);
    } else {
      cb(new Error("Ch·ªâ ch·∫•p nh·∫≠n file JPEG, JPG ho·∫∑c PNG"));
    }
  },
});

const router = express.Router();

// L·∫•y th√¥ng tin v√≠ c·ªßa ng∆∞·ªùi d√πng
router.get("/:userId", authMiddleware, async (req, res) => {
  try {
    const { userId } = req.params;
    const currentUserId = req.user.userId;
    const userRole = req.user.role;

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: "User ID kh√¥ng h·ª£p l·ªá" });
    }

    if (userRole !== "admin" && userId !== currentUserId) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem v√≠ n√†y" });
    }

    let wallet = await Wallet.findOne({ user: userId });
    if (!wallet) {
      wallet = new Wallet({ user: userId, balance: 0, transactions: [] });
      await wallet.save();
    }

    res.status(200).json(wallet);
  } catch (error) {
    console.error("üî• L·ªói khi l·∫•y th√¥ng tin v√≠:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

// N·∫°p ti·ªÅn v√†o v√≠
router.post("/deposit", authMiddleware, async (req, res) => {
  try {
    const userId = req.user.userId;
    const { amount } = req.body;

    if (!amount || typeof amount !== "number" || amount <= 0) {
      return res.status(400).json({ message: "S·ªë ti·ªÅn n·∫°p kh√¥ng h·ª£p l·ªá" });
    }

    let wallet = await Wallet.findOne({ user: userId });
    if (!wallet) {
      wallet = new Wallet({ user: userId, balance: 0, transactions: [] });
    }

    const transaction = {
      type: "deposit",
      amount,
      status: "completed",
      createdAt: new Date(),
    };

    wallet.transactions.push(transaction);
    wallet.balance += amount;
    await wallet.save();

    const notification = new Notification({
      user: userId,
      message: `N·∫°p ${amount.toLocaleString("vi-VN")} VNƒê v√†o v√≠ th√†nh c√¥ng`,
      isRead: false,
    });
    await notification.save();

    req.socketIO.to(userId).emit("notification", {
      _id: notification._id,
      user: userId,
      message: notification.message,
      isRead: notification.isRead,
      createdAt: notification.createdAt,
    });

    res.status(200).json({ message: "N·∫°p ti·ªÅn th√†nh c√¥ng", wallet });
  } catch (error) {
    console.error("üî• L·ªói khi n·∫°p ti·ªÅn:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

// Admin t·∫£i l√™n m√£ QR
router.post("/qr", authMiddleware, adminMiddleware, upload.single("qrCode"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: "Vui l√≤ng t·∫£i l√™n m√£ QR" });
    }

    const qrCodeUrl = `/uploads/${req.file.filename}`;

    await Wallet.updateMany({}, { qrCode: qrCodeUrl });

    const notification = new Notification({
      user: null,
      message: "M√£ QR thanh to√°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      isRead: false,
    });
    await notification.save();

    req.socketIO.to("admin").emit("notification", {
      _id: notification._id,
      user: null,
      message: notification.message,
      isRead: notification.isRead,
      createdAt: notification.createdAt,
    });

    res.status(200).json({ message: "T·∫£i m√£ QR th√†nh c√¥ng", qrCode: qrCodeUrl });
  } catch (error) {
    console.error("üî• L·ªói khi t·∫£i m√£ QR:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

// L·∫•y m√£ QR hi·ªán t·∫°i
router.get("/qr", authMiddleware, async (req, res) => {
  try {
    const wallet = await Wallet.findOne({ user: req.user.userId });
    const qrCode = wallet?.qrCode || null;

    if (!qrCode) {
      return res.status(404).json({ message: "Ch∆∞a c√≥ m√£ QR n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p" });
    }

    res.status(200).json({ qrCode });
  } catch (error) {
    console.error("üî• L·ªói khi l·∫•y m√£ QR:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

module.exports = router;